#!/bin/sh
# devolve -- shell script to revert blackfin from u-boot-2013.07-2014R1 bootloader
#  and 3.10 linux kernel to u-boot-2011.12 bootloader and 2.6 linux kernel
#
# Copyright (c) 2014 LCOGT, Inc.
#

if [ \( "$1" = "--help" \) -o \( $# -ne 2 \) ]; then
	echo "usage: devolve <bootloader> <image_file>"
	echo
	echo "Example: devolve u-boot uImage-fw1m0"
	echo
	exit 1
fi

# Verify we have the correct starting configuration

kernel=`uname -r | awk -F"[ .]+" '{print $1"."$2}'`
if [ "$kernel" != "3.10" ]; then
	echo "Unsupported kernel version $kernel detected."
	echo "This script only supports downgrading from 3.10 kernels."
	exit 1
fi
mtd_size=`cat /proc/mtd | awk '/mtd0:/ {print $2}'`
if [ "$mtd_size" != "00040000" ]; then
	echo "mtd0 size mismatch: expected 00040000, found $mtd_size"
	exit 1
fi
mtd_size=`cat /proc/mtd | awk '/mtd1:/ {print $2}'`
if [ "$mtd_size" != "00100000" ]; then
	echo "mtd1 size mismatch: expected 00100000, found $mtd_size"
	exit 1
fi
mtd_size=`cat /proc/mtd | awk '/mtd2:/ {print $2}'`
if [ "$mtd_size" != "00100000" ]; then
	echo "mtd2 size mismatch: expected 00100000, found $mtd_size"
	exit 1
fi

cd /tmp

# Download the target bootloader and kernel image

echo "Downloading bootloader $1..."
tftp -g -l "$1.bin" -r "blackfin/$1.bin" repos
if [ $? -ne 0 ]; then
	echo "Error downloading $1.bin"
	exit 1
fi
echo "Download complete."
grep -q uImage-superfin "$1.bin"
if [ $? -ne 0 ]; then
	echo "$1 is not correct bootloader for this operation."
	exit 1
fi

echo "Downloading image file $2..."
tftp -g -l "$2" -r "blackfin/$2" repos
if [ $? -ne 0 ]; then
	echo "Error downloading $2"
	exit 1
fi
echo "Download complete."
grep -q 'uClinux Kernel and ext2' "$2"
if [ $? -ne 0 ]; then
	echo "$2 is not the correct image file for this operation."
	exit 1
fi

# Patch the bootloader with the proper MAC address and boot command

ethaddr=`ifconfig eth0 | awk '/HWaddr/ {print $5}'`
echo "Your ethernet address is $ethaddr"
sleep 1
echo "Patching bootloader..."
patchboot "$1.bin" bootcmd "run localboot" ethaddr "$ethaddr"
echo "Patch complete."
sleep 1

# Offer opportunity to back out

echo
echo
echo "*********************************************************************************"
echo "    DANGER!  DANGER!  WARNING!  WARNING!  DANGER!  DANGER!  WARNING!  WARNING!"
echo "*********************************************************************************"
echo
echo "You have reached the point of no return.  Proceed at your own risk.  If anything"
echo "goes wrong from this point forward, you may have to travel half-way around the"
echo "planet to fix it.  Good luck!"
echo
echo
echo "Type 'GO' and press <Enter> to begin flashing or just press <Enter> to quit."
echo
read response

if [ "$response" != "GO" ]; then
	echo "Flashing aborted!"
	exit 1
fi

# Execute the downgrade

echo
echo "Here goes nothing..."
echo

echo "Stopping services..."
killall boa crond lcocron post
sleep 2
echo "Services stopped."

echo "Unmounting flash filesystem..."
umount /mnt/flash
sleep 1
echo "Flash filesystem unmounted."

echo "Flashing bootloader..."
flash_erase -u /dev/mtd0 0 0
dd if="$1.bin" of=/dev/mtd0 bs=128k conv=sync
flash_lock /dev/mtd0
echo "Bootloader flashed."

echo "Initializing flash filesystem..."
flash_erase -u /dev/mtd1 0 6
echo "Flash filesystem initialized."

echo "Flashing image file..."
flash_erase -u /dev/mtd1 0xC0000 2
echo "Writing bytes 0x000000 - 0x03FFFF"
dd if="$2" of=/dev/mtd1 bs=128k seek=6 count=2
flash_lock /dev/mtd1 0xC0000 2

flash_erase -u /dev/mtd2 0 0
echo "Writing bytes 0x040000 - 0x13FFFF"
dd if="$2" of=/dev/mtd2 bs=128k skip=2 count=8
flash_lock /dev/mtd2

flash_erase -u /dev/mtd3 0 0
echo "Writing bytes 0x140000 - 0x2FFFFF"
dd if="$2" of=/dev/mtd3 bs=128k skip=10 count=14 conv=sync
flash_lock /dev/mtd3

echo "Image file flashed."
sleep 1

echo "Rebooting in five seconds..."
sleep 5
reboot
